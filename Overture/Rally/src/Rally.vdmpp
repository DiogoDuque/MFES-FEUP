class Rally is subclass of State

types
	public Country = Utils`Country;
	public Surface = <Mountain> | <Asphalt> | <Sand> | <Forest> | <Snow> | <Gravel>;
	public String = Utils`String;
	public Date = DateUtils`Date;
	public StageId = Stage`StageId;

instance variables
  private stages: seq of Stage := [];
  private currentStageIndex: int := -1;
  private rankings: seq of Ranking := [];
  private startDate: Date;
  private endDate: Date;
  private name: String;
  private description: String;
  private country: Country;
  private surface: Surface;
  private distance: real := 0.0;
  
  inv endDate > startDate;
  inv not exists s1, s2 in seq stages & s1 <> s2 and s1.GetId() = s2.GetId();
  inv Sequence`isAscendingTotalOrder[Stage](lambda x: Stage, y: Stage & x.GetId() < y.GetId())(stages);
  inv not exists r1, r2 in seq rankings &
      r1 <> r2 and r1.GetDriver().GetName() = r2.GetDriver().GetName();
  inv forall i in set inds rankings &
      i > 1 => let e1 = rankings(i-1), e2 = rankings(i) in e1.GetPoints() >= e2.GetPoints();
                   
operations
  public Rally : String * String * Country * Surface * Date * Date ==> Rally
		Rally(name0, description0, country0, surface0, startDate0, endDate0) == (
			name := name0;
			description := description0;
			country := country0;
			surface := surface0;
			startDate := startDate0;
			endDate := endDate0;
		  return self;
		)
		pre endDate0 > startDate0 and name0 <> "" and description0 <> ""
		post name = name0 and description = description0 and country = country0
			and surface = surface0 and startDate = startDate0
			and endDate = endDate0 and rankings = [] and stages = [];

	-- *** Transactions ***
	
	public StartRally: set of Driver ==> () 
		StartRally(drivers) == (
			for all elem in set drivers  
		  	do rankings := rankings ^ [new Ranking(elem)];
		  currentStageIndex := 0;
		  stages(currentStageIndex).Init();	
			Init();
		)
		pre state = <OffSeason> and stages <> [] and drivers <> {} and not exists s in seq stages & s.GetState() <> <OffSeason>
		post state = <Occurring> and rankings <> [];

	public NextStage: set of Performance ==> () 
		NextStage(performances) == (
			stages(currentStageIndex).Finalize();	
			for all elem in set performances  
		  	do stages(currentStageIndex).AddPerformance(elem);
		  	
		  currentStageIndex := currentStageIndex + 1;	
		  if(currentStageIndex >= len stages) then EndRally() else stages(currentStageIndex).Init();
		)
		pre state = <Occurring> and stages(currentStageIndex).GetState() = <Occurring>;

	private EndRally: () ==> () 
		EndRally() == (
			currentStageIndex := -1;	
			Finalize();
		)
		pre state = <Occurring>
		post state = <Completed> and not exists s in seq stages & s.GetState() <> <Completed>;
	
	public AddStage: Stage ==> ()
		AddStage(s) == (
			stages := stages ^ [s];
			distance := distance + s.GetDistance();
		) 
		pre state = <OffSeason> and s.GetDate() >= startDate and s.GetDate() <= endDate and not exists s1 in seq stages & s <> s1 and s1.GetId() = s.GetId()
		post exists s1 in seq stages & s1 = s;
		
	-- *** Getters ***

	pure public GetStartDate: () ==> Date
		GetStartDate() ==
		  return startDate
		post RESULT = startDate;
		
	pure public GetEndDate: () ==> Date
		GetEndDate() ==
		  return endDate
		post RESULT = endDate;	
		
	pure public GetName: () ==> String
		GetName() ==
		  return name
		post RESULT = name;	
		
	pure public GetDescription: () ==> String
		GetDescription() ==
		  return description
		post RESULT = description;	
		
	pure public GetCountry: () ==> Country
		GetCountry() ==
		  return country
		post RESULT = country;	
		
	pure public GetSurface: () ==> Surface
		GetSurface() ==
		  return surface
		post RESULT = surface;	
		
	pure public GetDistance: () ==> real
		GetDistance() ==
		  return distance
		post RESULT = distance;
		
	pure public GetStages: () ==> seq of Stage
		GetStages() ==
			return stages
		post RESULT = stages;
		
	pure public GetDriverRanking: Driver ==> Ranking
		GetDriverRanking(driver0) ==
			let i in set inds rankings be st rankings(i).GetDriver() = driver0 in return rankings(i)
		pre exists ranking in seq rankings & ranking.GetDriver() = driver0;
	
	pure public GetDriverPerformanceOnStage: StageId * Driver ==> Performance 
    GetDriverPerformanceOnStage(stageId0, driver0) == 
    	let iS in set inds stages be st stages(iS).GetId() = stageId0 in
    				(let iP in set inds stages(iS).GetPerformances() be st stages(iS).GetPerformances()(iP).GetDriver() = driver0 in
    							return stages(iS).GetPerformances()(iP))
		pre exists stage in seq stages & stage.GetId()=stageId0 and
					(exists performance in seq stage.GetPerformances() & performance.GetDriver() = driver0);

end Rally
