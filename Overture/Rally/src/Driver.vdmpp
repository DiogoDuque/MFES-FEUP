class Driver

types 
	public String = Utils`String;
	public Country = Utils`Country;
	public Date = DateUtils`Date;
	public Gender = Utils`Gender;

instance variables
  private team: [Team];
  private car: [Car];
  private name: String;
  private gender: Gender;
  private nationality: Country;
  private birth: Date;
  
  inv if(team.GetBacker() <> nil) then team.GetBacker() = car.GetManufacturer() else true;
   
operations
  public Driver: String * Gender * Country * Date * Car * Team ==> Driver
		Driver(name0, gender0, nationality0, birth0, car0, team0) == (
		  name := name0;
		  gender := gender0;
		  nationality := nationality0;
		  birth := birth0;
		  car := car0;
		  team := team0;
		  return self;
		)
		pre name0 <> ""
		post name = name0 and gender = gender0 and nationality = nationality0 and birth = birth0;

	-- *** Transactions **	

	public SetCar: (Car) ==> ()
		SetCar(c) ==
		  car := c
		pre team <> nil and c in set team.GetCars() 
		post car = c;

	-- *** Getters ***

	pure public GetTeam: () ==> [Team]
		GetTeam() ==
		  return team
		post RESULT = team;
		
	pure public GetCar: () ==> [Car]
		GetCar() ==
		  return car
		post RESULT = car;	
		
	pure public GetName: () ==> String
		GetName() ==
		  return name
		post RESULT = name;
		
	pure public GetGender: () ==> Gender
		GetGender() ==
		  return gender
		post RESULT = gender;	
		
	pure public GetNationality: () ==> Country
		GetNationality() ==
		  return nationality
		post RESULT = nationality;	
		
	pure public GetBirth: () ==> Date
		GetBirth() ==
		  return birth
		post RESULT = birth;

end Driver
