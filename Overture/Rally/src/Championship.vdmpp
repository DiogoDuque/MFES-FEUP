class Championship is subclass of State

types 
	public String = Utils`String;
	public Date = DateUtils`Date;
  public TeamName = Team`TeamName;

instance variables
  private series: seq of Rally := [];
  private currentRallyIndex: int := -1;
  private teams: map TeamName to Team := { |-> };
  private partners: set of Partner := {};
  private name: String;
  private startDate: Date;
  private endDate: Date;
  
  -- nome � chave de rally/team/partner, isto �, n�o podem existir dois rallies/teams/partners diferentes com o mesmo nome
  inv not exists r1, r2 in seq series &
        r1 <> r2 and r1.GetName() = r2.GetName();
  inv not exists p1, p2 in set partners &
        p1 <> p2 and p1.GetName() = p2.GetName();
	inv endDate > startDate;     
	inv Sequence`isAscendingTotalOrder[Rally](lambda x: Rally, y: Rally & x.GetStartDate() < y.GetStartDate())(series);
	inv forall r in seq series & r.GetEndDate() < endDate and r.GetStartDate() > startDate;

operations
  public Championship: String * Date * Date ==> Championship
		Championship(name0, startDate0, endDate0) == (
			  name := name0;
			  startDate := startDate0;
			  endDate := endDate0;
			  return self;
			)
		pre endDate0 > startDate0 and name <> ""
		post name = name0 and startDate = startDate0 and endDate = endDate0 and teams = { |-> };
	
	-- *** Transactions ***

	public StartChampionship: () ==> () 
		StartChampionship() == (
			currentRallyIndex := 0;
		  series(currentRallyIndex).StartRally(GetDrivers());	
			Init();
		)
		pre state = <OffSeason> and series <> [] and teams <> { |-> } and not exists s in seq series & s.GetState() <> <OffSeason>
		post state = <Occurring> and currentRallyIndex <> -1 and series(currentRallyIndex).GetState() = <Occurring>;

	public UpdateCurrentRally: set of Performance ==> ()
		UpdateCurrentRally(performances) == (
			series(currentRallyIndex).NextStage(performances);
		)
		pre state = <Occurring> and series(currentRallyIndex).GetState() = <Occurring>;

	public IsCurrentRallyCompleted: () ==> bool
		IsCurrentRallyCompleted() == (
			if(series(currentRallyIndex).GetState() = <Completed>)
				then return true
			else return false	
		)
		pre state = <Occurring>;

	public NextRally: () ==> () 
		NextRally() == (
			currentRallyIndex := currentRallyIndex + 1;	
		  if(currentRallyIndex >= len series) then EndChampionship() else series(currentRallyIndex).StartRally(GetDrivers());	
		)
		pre state = <Occurring> and series(currentRallyIndex).GetState() = <Completed>;

	private EndChampionship: () ==> () 
		EndChampionship() == (
			currentRallyIndex := -1;	
			Finalize();
		)
		pre state = <Occurring>
		post state = <Completed> and not exists r in seq series & r.GetState() <> <Completed>;
			
	public AddPartner: Partner ==> ()
		AddPartner(p) == (
			partners := partners union {p}
		)
		pre state = <OffSeason> and not exists p1 in set partners & p1.GetName() = p.GetName()
		post p in set partners;
		
	public RemovePartner: Partner ==> ()
		RemovePartner(p) == (
			partners := partners \ {p}
		)
		pre state = <OffSeason> and p in set partners
		post partners = partners~ \ {p};	
	
	public AddRally: Rally ==> ()
		AddRally(r) == (
			series := series ^ [r]
		)
		pre state = <OffSeason> and not exists r1 in seq series & r1.GetName() = r.GetName() and r1.GetStartDate() > startDate and r1.GetEndDate() < endDate;

	public AddTeam: Team ==> ()
		AddTeam(t) == (
			teams := teams munion {t.GetName() |-> t}; 
		)
		pre state = <OffSeason> and t.GetName() not in set dom teams
		post teams = teams~ munion {t.GetName() |-> t};

	public RemoveTeam: Team ==> ()
		RemoveTeam(t) == (
			teams := {t.GetName()} <-: teams;
		)
		pre state = <OffSeason> and t.GetName() in set dom teams
		post t.GetName() not in set dom teams;
	
	-- *** Getters ***
	
	pure public GetCurrentRally: () ==> Rally
		GetCurrentRally() == (
			return 
				if state = <Occurring>
           then series(currentRallyIndex)
        else nil;	
		);	
	
	pure public GetDrivers: () ==> set of Driver
		GetDrivers() == (
			return dunion { t.GetDrivers() | t in set rng teams };
		);
	
	pure public GetName: () ==> String
		GetName() ==
		  return name
		post RESULT = name;
		
	pure public GetStartDate: () ==> Date
		GetStartDate() ==
		  return startDate
		post RESULT = startDate;
		
	pure public GetEndDate: () ==> Date
		GetEndDate() ==
		  return endDate
		post RESULT = endDate;		
		
	pure public GetTeams: () ==> map TeamName to Team
	GetTeams() ==
		return teams
	post RESULT = teams;
		
	pure public GetPartners: () ==> set of Partner
		GetPartners() ==
			return partners
		post RESULT = partners;
		
	pure public GetSeries: () ==> seq of Rally
		GetSeries() ==
			return series
		post RESULT = series;
	
	pure public GetTeamByName: (String) ==> Team
		GetTeamByName(tName) ==
			return teams(tName)
		pre tName in set dom teams;
	
	pure public GetRallyByName: (String) ==> Rally
		GetRallyByName(rName) ==
			let i in set inds series be st series(i).GetName()=rName in return series(i)
		pre exists i in set inds series & series(i).GetName() = rName;

end Championship
