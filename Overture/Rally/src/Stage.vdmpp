class Stage

types
	public StageType = <Transport> | <Special>;
	public Date = DateUtils`Date;
	public StageId = nat1;
	public String = Utils`String;
	public StageState = <Completed> | <Incompleted>;

instance variables
  private performances: seq of Performance := [];
  private type: StageType;
  private date: Date;
  private distance: real;
  private id: StageId;
  private state: StageState := <Incompleted>;
  
  -- performances have unique drivers
  inv not exists p1, p2 in seq performances & 
        p1<>p2 and p1.GetDriver() = p2.GetDriver();
	inv if(state = <Incompleted>) then len performances = 0 else forall p in seq performances & p.GetTime() > 0;
  
operations
  public Stage : nat1 * StageType * Date * real ==> Stage
		Stage(id0, type0, date0, distance0) == (
			id := id0;
			type := type0;
			date := date0;
			distance := distance0;
		  return self;
		)
		pre distance0 > 0 and id0 <> 0
		post type = type0 and date = date0 and distance = distance0 and id = id0;

	-- *** Transactions ***
	
	public AddPerformance: Performance ==> ()
		AddPerformance(perf) ==
			performances := InsertSorted(perf, performances, perf.Compare)
		pre state = <Completed>
		post exists p in seq performances & perf = p;
		
	public GetDriverPerformance: String ==> [Performance]
		GetDriverPerformance(driverName) == (
			return 
				if exists p in seq performances & p.GetDriver().GetName() = driverName 
           then iota p in seq performances & p.GetDriver().GetName() = driverName 
        else nil;		
		);
		
	public GetDriverPerformance: Driver ==> [Performance]
		GetDriverPerformance(d) == (
			return 
				if exists p in seq performances & p.GetDriver() = d 
           then iota p in seq performances & p.GetDriver() = d 
        else nil;		
		);
	
	-- Sorted by average speed. Needs a better name
	public GetPerformancesSortedByAverageSpeed: () ==> seq of Performance
		GetPerformancesSortedByAverageSpeed() == (
			return Sequence`sort[Performance](lambda x: Performance, y: Performance & x.GetAverageSpeed() > y.GetAverageSpeed())(performances)
		)
		pre state = <Completed>;
		
	public FinalizeStage: () ==> ()
		FinalizeStage() == 
			state := <Completed>
			pre state = <Incompleted>
			post state = <Completed>;

	-- *** Getters *** 
	
	pure public GetState: () ==> StageState
		GetState() ==
		  return state
		post RESULT = state;		
	
	pure public GetType: () ==> StageType
		GetType() ==
		  return type
		post RESULT = type;		
	
	pure public GetId: () ==> StageId
		GetId() ==
		  return id
		post RESULT = id;		
	
	pure public GetDate: () ==> Date
		GetDate() ==
		  return date
		post RESULT = date;
		
	pure public GetDistance: () ==> real
		GetDistance() ==
		  return distance
		post RESULT = distance;
	
	pure public GetPerformances: () ==> seq of Performance
		GetPerformances() ==
			return performances
		post RESULT = performances;
		
functions
	private static InsertSorted: Performance * seq of Performance * (Performance * Performance -> int) -> seq of Performance
		InsertSorted(i, l, compare) ==     
			cases true :
	      (l = [])    -> [i],
	      (compare(i, hd l) <= 0)  -> [i] ^ l,
	      others      -> [hd l] ^ InsertSorted(i, tl l, compare)
	    end;

end Stage
