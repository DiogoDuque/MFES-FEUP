class Stage

types
	public StageType = <Timed> | <Transport> | <Special>;
	public Date = DateUtils`Date;
	
values
-- TODO Define values here

instance variables
  private performances: seq of (Performance) := [];
  private type: StageType;
  private date: Date;
  private distance: real;
  
  -- performances have unique drivers
  inv not exists p1, p2 in seq performances &
  			p1.GetDriver() = p2.GetDriver();
  
operations
  public Stage : StageType * Date * real ==> Stage
	Stage(type0, date0, distance0) == (
		type := type0;
		date := date0;
		distance := distance0;
	  return self;
	)
	pre distance0 > 0
	post type = type0 and date = date0 and distance = distance0;

	pure public GetType: () ==> StageType
	GetType() ==
	  return type
		post RESULT = type;		
		
	pure public GetDate: () ==> Date
	GetDate() ==
	  return date
		post RESULT = date;
		
	pure public GetDistance: () ==> real
	GetDistance() ==
	  return distance
		post RESULT = distance;
		
	public GetDriverPerformance: Driver ==> Performance
	GetDriverPerformance(d) == (
		let p in seq performances be st d in p.GetDriver()
    return p;
	)
	--TO DO precondition to ensure driver exists
	post RESULT in set performances;
	
functions
-- TODO Define functiones here
traces
-- TODO Define Combinatorial Test Traces here
end Stage
