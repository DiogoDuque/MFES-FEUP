class Team

types
	public Country = <Italy> | <France> | <Spain> | <Portugal> |
									 <SouthKorea> | <Germany> | <GreatBritain> | <Japan>;
	public String = seq of char;
	public TeamName = seq of char;

instance variables
  private drivers : set of Driver := {};
  private sponsors : set of Sponsor := {};
  private backer : [Manufacturer] := nil;
  private cars : set of Car := {};
  private name : String;
  private based : Country;
  private true_self: Team;
  
  inv not exists d1, d2 in set drivers &
        d1 <> d2 and d1.GetName() = d2.GetName();
  inv not exists s1, s2 in set sponsors &
        s1 <> s2 and s1.GetName() = s2.GetName();
  inv not exists c1, c2 in set cars &
        c1 <> c2 and c1.GetModel() = c2.GetModel();
       
  inv forall d in set drivers & d.GetTeam() = true_self;
  inv forall d in set drivers & d.GetCar() <> nil => d.GetCar() in set cars;
  
operations
	/**
	 * Instantiates a team instance.
	 */	
  public Team : String * Country ==> Team
		Team(name0, based0) == (
			name := name0;
			based := based0;
			true_self := self;
		  return self;
		)
		pre name0 <> ""
		post name = name0 and based = based0;

	-- *** Transactions ***

	/**
	 * Adds a new sponsor
	 */		
	public AddSponsor: Sponsor ==> ()
		AddSponsor(s) == (
			sponsors := sponsors union {s}
		)
		pre not exists s1 in set sponsors & s1.GetName() = s.GetName();

	/**
	 * Removes a sponsor that must exist
	 */			
	public RemoveSponsor: Sponsor ==> ()
		RemoveSponsor(s) == (
			sponsors := sponsors \ {s}
		)
		pre s in set sponsors
		post sponsors = sponsors~ \ {s};		

	/**
	 * Sets the team manufacturer
	 */	
	public SetBacker: Manufacturer ==> ()
		SetBacker(m) == (
			backer := m;
		)
		pre not exists c1 in set cars & c1.GetManufacturer().GetName() <> m.GetName();

	/**
	 * Removes the team manufacturer
	 */	
	public RemoveBacker: () ==> ()
		RemoveBacker() == (
			backer := nil;
		)
		post backer = nil;

	/**
	 * Adds a new car
	 */	
	public AddCar: Car ==> ()
		AddCar(c) == (
			cars := cars union {c}
		)
		pre if(backer <> nil) then c.GetManufacturer().GetName() = backer.GetName() else true
			and not exists c1 in set cars & c1.GetModel() = c.GetModel()
		post c in set cars;	

	/**
	 * Removes a car, that must exist
	 */				
	public RemoveCar: Car ==> ()
		RemoveCar(c) == (
			cars := cars \ {c}
		)			
		pre c in set cars and forall d in set drivers & d.GetCar() <> c
		post cars = cars~ \ {c};

	/**
	 * Assigns a car to a driver. Both must belong in the respective team
	 */		
	public AssignCarToDriver: Car * Driver ==> ()
		AssignCarToDriver(car, driver) == (
      for all elem in set drivers  
      	do 
        	if elem.GetName() = driver.GetName() 
            then (elem.SetCar(car))
    )
    pre car in set cars and driver in set drivers and driver.GetCar() = nil;

	/**
	 * Removes a car assignment
	 */	
	public UnassignCarFromDriver: Driver ==> ()
		UnassignCarFromDriver(driver) == (
      for all elem in set drivers  
      	do 
        	if elem.GetName() = driver.GetName() 
            then (elem.RemoveCar())
    )
    pre driver in set drivers and driver.GetCar() <> nil;

	/**
	 * Adds a new driver
	 */	
	public AddDriver: Driver ==> ()
		AddDriver(d) == (
			d.SetTeam(self);
			drivers := drivers union {d}
		)
		pre d.GetTeam() = nil and d.GetCar() = nil and not exists d1 in set drivers & d1.GetName() = d.GetName();

	/**
	 * Removes a driver
	 */	
	public RemoveDriver: Driver ==> ()
		RemoveDriver(d) == (
			drivers := drivers \ {d};
			d.RemoveTeam();
			d.RemoveCar();
		)
		pre d in set drivers
		post drivers = drivers~ \ {d};			
	
	-- *** Getters ***

	/**
	 * Gets the team cars
	 * 
	 * @return set of Car
	 */	
	pure public GetCars: () ==> set of Car
		GetCars() ==
		  return cars
		post RESULT = cars;		

	/**
	 * Gets the team sponsors.
	 * 
	 * @return set of sponsor
	 */			
	pure public GetSponsors: () ==> set of Sponsor
		GetSponsors() ==
		  return sponsors
		post RESULT = sponsors;

	/**
	 * Gets the team drivers
	 * 
	 * @return set of Driver
	 */			
	pure public GetDrivers: () ==> set of Driver
		GetDrivers() ==
		  return drivers
		post RESULT = drivers;	

	/**
	 * Gets the team manufacturer
	 * 
	 * @return Manufacturer
	 */	
	pure public GetBacker: () ==> [Manufacturer]
		GetBacker() ==
		  return backer
		post RESULT = backer;		

	/**
	 * Gets the team name.
	 * 
	 * @return name
	 */			
	pure public GetName: () ==> String
		GetName() ==
		  return name
		post RESULT = name;

	/**
	 * Gets the team original country.
	 * 
	 * @return Country
	 */			
	pure public GetBased: () ==> Country
		GetBased() ==
		  return based
		post RESULT = based;

	/**
	 * Gets a driver instance, through its name.
	 * 
	 * @return Driver
	 */		
	pure public GetDriverByName: (String) ==> Driver
		GetDriverByName(dName) ==
			let driver in set drivers be st driver.GetName()=dName in return driver
		pre let driver in set drivers in driver.GetName() = dName;

end Team
