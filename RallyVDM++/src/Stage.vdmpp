class Stage is subclass of State

types
	public StageType = <Transport> | <Special>;
	public Date = DateUtils`Date;
	public StageId = nat1;
	public String = seq of char;

instance variables
  private performances: seq of Performance := [];
  private type: StageType;
  private date: Date;
  private distance: real;
  private id: StageId;
  
  -- performances have unique drivers
  inv not exists p1, p2 in seq performances & 
        p1<>p2 and p1.GetDriver() = p2.GetDriver();
	inv if(state = <OffSeason> or state = <Occurring>) then len performances = 0 else forall p in seq performances & p.GetTime() > 0;
  
operations
	/**
	 * Gets the car model.
	 * 
	 * @return model
	 */	
  public Stage : nat1 * StageType * Date * real ==> Stage
		Stage(id0, type0, date0, distance0) == (
			id := id0;
			type := type0;
			date := date0;
			distance := distance0;
		  return self;
		)
		pre distance0 > 0 and id0 <> 0
		post type = type0 and date = date0 and distance = distance0 and id = id0 and state = <OffSeason>;

	-- *** Transactions ***

	/**
	 * Gets the car model.
	 * 
	 * @return model
	 */		
	public AddPerformance: Performance ==> ()
		AddPerformance(perf) ==
			performances := InsertSorted(perf, performances, Compare)
		pre state = <Completed>
		post exists p in seq performances & perf = p;
		
	public GetDriverPerformance: String ==> [Performance]
		GetDriverPerformance(driverName) == (
			return 
				if exists p in seq performances & p.GetDriver().GetName() = driverName 
           then iota p in seq performances & p.GetDriver().GetName() = driverName 
        else nil;		
		);

	/**
	 * Gets the car model.
	 * 
	 * @return model
	 */			
	public GetDriverPerformance: Driver ==> [Performance]
		GetDriverPerformance(d) == (
			return 
				if exists p in seq performances & p.GetDriver() = d 
           then iota p in seq performances & p.GetDriver() = d 
        else nil;		
		);

	-- *** Getters *** 	

	/**
	 * Gets the car model.
	 * 
	 * @return model
	 */		
	pure public GetType: () ==> StageType
		GetType() ==
		  return type
		post RESULT = type;		

	/**
	 * Gets the car model.
	 * 
	 * @return model
	 */		
	pure public GetId: () ==> StageId
		GetId() ==
		  return id
		post RESULT = id;		

	/**
	 * Gets the car model.
	 * 
	 * @return model
	 */		
	pure public GetDate: () ==> Date
		GetDate() ==
		  return date
		post RESULT = date;

	/**
	 * Gets the car model.
	 * 
	 * @return model
	 */			
	pure public GetDistance: () ==> real
		GetDistance() ==
		  return distance
		post RESULT = distance;

	/**
	 * Gets the car model.
	 * 
	 * @return model
	 */		
	pure public GetPerformances: () ==> seq of Performance
		GetPerformances() ==
			return performances
		post RESULT = performances;
		
functions
	private static InsertSorted: Performance * seq of Performance * (Performance * Performance -> int) -> seq of Performance
		InsertSorted(i, l, compare) == 
			if(l = []) then [i]
			else if (compare(i, hd l) <= 0) then [i] ^ l
			else [hd l] ^ InsertSorted(i, tl l, compare);

	private static Compare: Performance * Performance -> int
		Compare(p1, p2) ==
			if p1.GetTime() > p2.GetTime() then 1 else -1
		pre p1.GetTime() > 0 and p2.GetTime() > 0;

end Stage
