class TeamTest is subclass of MyTestCase

instance variables
	sponsor1: Sponsor := new Sponsor("Abu Dhabi", "Official visitor website for Abu Dhabi travel and tourism, offering information on hotels, restaurants, things to do, culture & heritage and events.");
	sponsor2: Sponsor := new Sponsor("Eparco", "Spécialiste assainissement compact, développe et fabrique en exclusivité des solutions pour l'assainissement non collectif depuis 45 ans.");	
	sponsor3: Sponsor := new Sponsor("Stilo", "Stilo helmets competition. Top functionality, everything a driver needs must be standard feature: intercom, connections, earmuffs, drinking system.");
	sponsor4: Sponsor := new Sponsor("Michelin", "Michelin, the leading tire company, is dedicated to enhancing its clients’ mobility, sustainably; designing and distributing the most suitable tires, services and solutions for its clients’ needs.");

	manufacturer1: Manufacturer := new Manufacturer("Citroën", 
		"Citroën is one of the world's leading mainstream car manufacturers.",
		<France>);
	manufacturer2: Manufacturer := new Manufacturer("Toyota", 
		"Toyota is one of the world’s best-known and most successful businesses, building cars and trucks in 26 countries for sale in more than 160 markets around the globe.",
		<Japan>);	
	manufacturer3: Manufacturer := new Manufacturer("Hyunday", 
		"Hyundai Motor Company leads the Hyundai Motor Group, a wide-reaching business capable of processing resources from molten iron to finished cars.",
		<SouthKorea>);
		
	car1: Car := new Car("Hyundai i20", manufacturer3, 370, 1250);
	car2: Car := new Car("Citroën C3", manufacturer1, 400, 1300);
	car3: Car := new Car("Toyota Yaris", manufacturer2, 480, 1200);
	car4: Car := new Car("Citroën C4", manufacturer1, 400, 1300);
	
	team1: Team := new Team("CITROËN Total Abu Dhabi WRT", <France>);
	team2: Team := new Team("Hyundai Motorsport", <Germany>);
	team3: Team := new Team("M-Sport World Rally Team", <GreatBritain>);
	team4: Team := new Team("TOYOTA Gazoo Racing WRT", <Japan>);
	
	driver1: Driver := new Driver("Dan", <Male>, <GreatBritain>, DateUtils`MakeDate(1980, 10, 5));
	driver2: Driver := new Driver("Joana", <Female>, <Spain>, DateUtils`MakeDate(1987, 2, 22));
	driver3: Driver := new Driver("Alexio", <Male>, <Germany>, DateUtils`MakeDate(1995, 5, 29));
	
operations
	public Run: () ==> ()
	Run() == (
		IO`println("\nTeam Tests");
			
		assertEqual("CITROËN Total Abu Dhabi WRT", team1.GetName());
		assertEqual(<France>, team1.GetBased());
		assertEqual(nil, team1.GetBacker());
		assertEqual({}, team1.GetSponsors());
		
		team1.AddSponsor(sponsor1);
		assertTrue(sponsor1 in set team1.GetSponsors());
		team1.AddSponsor(sponsor2);
		assertTrue(sponsor2 in set team1.GetSponsors());
		team1.RemoveSponsor(sponsor1);
		assertTrue(sponsor1 not in set team1.GetSponsors());
		
		team1.AddCar(car1);
		team1.AddCar(car2);
		
		assertTrue({car1, car2} = team1.GetCars());
		team1.RemoveCar(car1);
		assertTrue(car1 not in set team1.GetCars());
		
		assertTrue(nil = team1.GetBacker());
		team1.SetBacker(manufacturer1);
		assertEqual(manufacturer1, team1.GetBacker());
		
		team1.AddCar(car4);
		team1.RemoveBacker();
		team1.AddCar(car3);
		
		team1.AddDriver(driver1);
		team1.AddDriver(driver2);
		assertTrue({driver1, driver2} = team1.GetDrivers());
		
		team1.RemoveDriver(driver1);
		assertTrue(driver1 not in set team1.GetDrivers());
		
		team1.AssignCarToDriver(car2, driver2);
		team1.RemoveCar(car3);
		
		team1.UnassignCarFromDriver(driver2);
		
		assertEqual(driver2, team1.GetDriverByName("Joana"));
			
		IO`println("\nFinalizing Team Tests");
	);
	
	public testInvalidTeamDriver: () ==> ()
		-- All the drivers that belong to a team, must have their team variable pointing to the respective team
		testInvalidTeamDriver() == (
			team1.AddDriver(driver1);
			driver1.RemoveTeam();
		);

		public testInvalidTeamDriverCar: () ==> ()
		-- All the drivers only can have a car if it's assigned by their own team. If a car is assigned and don't belong to the team, the invariant is violated
		testInvalidTeamDriverCar() == (
			team1.AddDriver(driver1);
			driver1.SetCar(car1);
		);
		
		public testInvalidTeamCar: () ==> ()
		-- If the team backer is instantiated, then all the cars that belong to the team need to have its manufacturer object pointing to the team backer.
		-- Otherwise, the team cars can have different manufacturers
		testInvalidTeamCar() == (
			team1.AddCar(car2);
			team1.AddCar(car4);
			team1.SetBacker(manufacturer1);
			team1.AddCar(car3);
		);
	
end TeamTest