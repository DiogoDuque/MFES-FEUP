class ChampionshipTest is subclass of MyTestCase

instance variables
	champ1: Championship := new Championship("WRC", DateUtils`MakeDate(2017, 10, 2), DateUtils`MakeDate(2017, 11, 20));
	champ2: Championship := new Championship("WRC Junior", DateUtils`MakeDate(2017, 8, 23), DateUtils`MakeDate(2017, 10, 11));
	champ3: Championship := new Championship("WRC Pro", DateUtils`MakeDate(2017, 1, 13), DateUtils`MakeDate(2017, 3, 20));
	champ4: Championship := new Championship("Amateur WRC", DateUtils`MakeDate(2017, 2, 2), DateUtils`MakeDate(2017, 5, 15));
	
	sponsor1: Sponsor := new Sponsor("Abu Dhabi", "Official visitor website for Abu Dhabi travel and tourism, offering information on hotels, restaurants, things to do, culture & heritage and events.");
	sponsor2: Sponsor := new Sponsor("Eparco", "Spécialiste assainissement compact, développe et fabrique en exclusivité des solutions pour l'assainissement non collectif depuis 45 ans.");	
	sponsor3: Sponsor := new Sponsor("Stilo", "Stilo helmets competition. Top functionality, everything a driver needs must be standard feature: intercom, connections, earmuffs, drinking system.");
	sponsor4: Sponsor := new Sponsor("Michelin", "Michelin, the leading tire company, is dedicated to enhancing its clients’ mobility, sustainably; designing and distributing the most suitable tires, services and solutions for its clients’ needs.");

	manufacturer1: Manufacturer := new Manufacturer("Citroën", 
		"Citroën is one of the world's leading mainstream car manufacturers.",
		<France>);
	manufacturer2: Manufacturer := new Manufacturer("Toyota", 
		"Toyota is one of the world’s best-known and most successful businesses, building cars and trucks in 26 countries for sale in more than 160 markets around the globe.",
		<Japan>);	
	manufacturer3: Manufacturer := new Manufacturer("Hyunday", 
		"Hyundai Motor Company leads the Hyundai Motor Group, a wide-reaching business capable of processing resources from molten iron to finished cars.",
		<SouthKorea>);
	
	rally1: Rally := new Rally("The Dark Mountain", "A very dark mountain", <Germany>, <Mountain>, DateUtils`MakeDate(2017, 10, 5), DateUtils`MakeDate(2017, 10, 10));
	rally2: Rally := new Rally("Despair Woods", "Maze-like woods it the heart of Spain", <Spain>, <Forest>, DateUtils`MakeDate(2017, 10, 14), DateUtils`MakeDate(2017, 10, 20));
	rally3: Rally := new Rally("Fail Rally date", "Maze-like woods it the heart of Spain", <Spain>, <Forest>, DateUtils`MakeDate(2017, 9, 25), DateUtils`MakeDate(2017, 10, 20));	
		
	car1: Car := new Car("Hyundai i20", manufacturer3, 370, 1250);
	car2: Car := new Car("Citroën C3", manufacturer1, 400, 1300);
	car3: Car := new Car("Toyota Yaris", manufacturer2, 480, 1200);
	car4: Car := new Car("Citroën C4", manufacturer1, 400, 1300);
	
	team1: Team := new Team("CITROËN Total Abu Dhabi WRT", <France>);
	team2: Team := new Team("Hyundai Motorsport", <Germany>);
	team3: Team := new Team("M-Sport World Rally Team", <GreatBritain>);
	team4: Team := new Team("TOYOTA Gazoo Racing WRT", <Japan>);
	
	driver1: Driver := new Driver("Dan", <Male>, <GreatBritain>, DateUtils`MakeDate(1980, 10, 5));
	driver2: Driver := new Driver("Joana", <Female>, <Spain>, DateUtils`MakeDate(1987, 2, 22));
	driver3: Driver := new Driver("Alexio", <Male>, <Germany>, DateUtils`MakeDate(1995, 5, 29));
	driver4: Driver := new Driver("Another one", <Male>, <Germany>, DateUtils`MakeDate(1996, 5, 29));
	
	partner1: Partner := new Partner("Michelin", "Michelin, the leading tire company, is dedicated to enhancing its clients’ mobility, sustainably; designing and distributing the most suitable tires, services and solutions for its clients’ needs.");
	partner2: Partner := new Partner("Certina", "Precision, reliability, innovation and dynamism. These are the values that have always linked Certina to sport.");	
	partner3: Partner := new Partner("OneBet", "OneBet is the official sports betting partner of the FIA World Rally Championship, providing spectacular opportunities to boost the rush and experience of WRC.");		
	
	stage1: Stage := new Stage(1, <Special>, DateUtils`MakeDate(2017, 10, 6), 50);
	stage2: Stage := new Stage(2, <Special>, DateUtils`MakeDate(2017, 10, 8), 200);
	stage3: Stage := new Stage(1, <Special>, DateUtils`MakeDate(2017, 10, 15), 50);
	stage4: Stage := new Stage(2, <Special>, DateUtils`MakeDate(2017, 10, 16), 200);

	performance1: [Performance] := nil;
	performance2: [Performance] := nil;
	performance3: [Performance] := nil;
	performance4: [Performance] := nil;		
	
operations
	public Run: () ==> ()
	Run() == (
		IO`println("\nChampionship Tests");
			
		--Setup
		team1.AddCar(car1);
		team1.AddCar(car2);
		team2.AddCar(car3);
		team3.AddCar(car4);
		
		team1.AddDriver(driver1);
		team1.AddDriver(driver2);
		team2.AddDriver(driver3);
		team3.AddDriver(driver4);
		team1.AssignCarToDriver(car1, driver1);
		team1.AssignCarToDriver(car2, driver2);
		team2.AssignCarToDriver(car3, driver3);
		team3.AssignCarToDriver(car4, driver4);
		
		--Variables	
		assertEqual("WRC", champ1.GetName());
		assertEqual(DateUtils`MakeDate(2017, 10, 2), champ1.GetStartDate());
		assertEqual(DateUtils`MakeDate(2017, 11, 20), champ1.GetEndDate());
		assertTrue(champ1.GetStartDate() < champ1.GetEndDate());
		
		--Partners
		champ1.AddPartner(partner1);
		champ1.AddPartner(partner2);
		assertTrue(partner2 in set champ1.GetPartners());
		champ1.RemovePartner(partner2);
		assertTrue(partner2 not in set champ1.GetPartners());
		
		--Teams
		champ1.AddTeam(team1);
		champ1.AddTeam(team2);
		assertTrue(team1 in set rng champ1.GetTeams());
		champ1.RemoveTeam(team1);
		assertEqual({ team2.GetName() |-> team2 }, champ1.GetTeams());
		champ1.AddTeam(team3);
		champ1.AddTeam(team1);
		--Team by name
		assertEqual(team2, champ1.GetTeamByName("Hyundai Motorsport"));
		
		--Rally
		rally1.AddStage(stage1);
		rally1.AddStage(stage2);
		rally2.AddStage(stage3);
		rally2.AddStage(stage4);
		champ1.AddRally(rally1);
		champ1.AddRally(rally2);
		assertEqual(rally2, champ1.GetRallyByName("Despair Woods"));
		assertTrue(let i in set inds champ1.GetSeries() in champ1.GetSeries()(i)=rally1);
			
		assertTrue({driver1, driver2, driver3, driver4} subset champ1.GetDrivers());
		
		assertEqual(nil, champ1.GetCurrentRally());
		champ1.StartChampionship();
		assertTrue(champ1.IsCurrentRallyCompleted() = false);
		assertEqual(rally1, champ1.GetCurrentRally());
		
		performance1 := new Performance(driver1);
		performance2 := new Performance(driver2);
		performance3 := new Performance(driver3);
		performance4 := new Performance(driver4);		
		performance1.SetTime(200);
		performance1.SetAverageSpeed(50);
		performance2.SetTime(217);
		performance2.SetAverageSpeed(48);
		performance3.SetTime(202);
		performance3.SetAverageSpeed(50);
		performance4.SetTime(250);
		performance4.SetAverageSpeed(46);
		
		champ1.UpdateCurrentRally({performance1, performance2, performance3, performance4});
		champ1.UpdateCurrentRally({performance1, performance2, performance3, performance4});
		
		assertEqual(834, champ1.GetTeamRallyRanking("CITROËN Total Abu Dhabi WRT", "The Dark Mountain"));
		assertEqual(834, champ1.GetTeamGlobalRanking("CITROËN Total Abu Dhabi WRT"));
		
		assertTrue(champ1.IsCurrentRallyCompleted() = true);
		champ1.NextRally();
		champ1.UpdateCurrentRally({performance1, performance2, performance3, performance4});
		
		assertEqual(1251, champ1.GetTeamGlobalRanking("CITROËN Total Abu Dhabi WRT"));
		
		champ1.UpdateCurrentRally({performance1, performance2, performance3, performance4});
		assertTrue(champ1.IsCurrentRallyCompleted() = true);
		champ1.NextRally();
		assertEqual(<Completed>, champ1.GetState());
		
		assertTrue({"CITROËN Total Abu Dhabi WRT", "Hyundai Motorsport", "M-Sport World Rally Team"} subset dom champ1.GetTeamsRanking());
		assertTrue({1668, 808, 1000} subset rng champ1.GetTeamsRanking());
		IO`println("\nFinalizing Championship Tests");
	);
	
		public testRalliesDates: () ==> ()
		 -- A championship has a start and end date, just like a rally; A stage has a single date;
		 -- So, a rally must have their dates between the respective championship that is part of; and a stage must have the date between the rally dates from which it belong to
			testRalliesDates() == (
				rally3.AddStage(stage1);
				rally3.AddStage(stage2);
				champ1.AddRally(rally3);
			);	

		public testChampionshipStates: () ==> ()
			-- A championship also has a pre defined flow:
			-- As usual, all teams, partners and rallies are added; After this, they cannot be updated
			-- Then, the method StartChampionship is called, which initializes the first rally rankings
			-- The rally flow is then used, by calling the method UpdateCurrentRally
			-- When all the rally stages are completed and only then the NextRally must be called
			-- After all the rallies are completed, the endChampionship can be called.
			testChampionshipStates() == (
				team1.AddCar(car1);
				team1.AddCar(car2);
				team2.AddCar(car3);
				team3.AddCar(car4);
				team1.AddDriver(driver1);
				team1.AddDriver(driver2);
				team2.AddDriver(driver3);
				team3.AddDriver(driver4);
				team1.AssignCarToDriver(car1, driver1);
				team1.AssignCarToDriver(car2, driver2);
				team2.AssignCarToDriver(car3, driver3);
				team3.AssignCarToDriver(car4, driver4);
				--Teams
				champ1.AddTeam(team1);
				champ1.AddTeam(team2);
				champ1.AddTeam(team3);
				
				--Rally
				rally1.AddStage(stage1);
				rally1.AddStage(stage2);
				rally2.AddStage(stage3);
				rally2.AddStage(stage4);
				champ1.AddRally(rally1);
				champ1.AddRally(rally2);
				
				champ1.StartChampionship();
				
				performance1 := new Performance(driver1);
				performance2 := new Performance(driver2);
				performance3 := new Performance(driver3);
				performance4 := new Performance(driver4);		
				performance1.SetTime(200);
				performance1.SetAverageSpeed(50);
				performance2.SetTime(217);
				performance2.SetAverageSpeed(48);
				performance3.SetTime(202);
				performance3.SetAverageSpeed(50);
				performance4.SetTime(250);
				performance4.SetAverageSpeed(46);
				
				champ1.UpdateCurrentRally({performance1, performance2, performance3, performance4});
				champ1.NextRally(); -- The current rally is not completed (there are stages to be ran)
				champ1.UpdateCurrentRally({performance1, performance2, performance3, performance4});
			);
		
end ChampionshipTest